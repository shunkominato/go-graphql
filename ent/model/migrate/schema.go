// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArInternalMetadataColumns holds the columns for the "ar_internal_metadata" table.
	ArInternalMetadataColumns = []*schema.Column{
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// ArInternalMetadataTable holds the schema information for the "ar_internal_metadata" table.
	ArInternalMetadataTable = &schema.Table{
		Name:       "ar_internal_metadata",
		Columns:    ArInternalMetadataColumns,
		PrimaryKey: []*schema.Column{ArInternalMetadataColumns[0]},
	}
	// SchemaMigrationsColumns holds the columns for the "schema_migrations" table.
	SchemaMigrationsColumns = []*schema.Column{
		{Name: "version", Type: field.TypeString},
	}
	// SchemaMigrationsTable holds the schema information for the "schema_migrations" table.
	SchemaMigrationsTable = &schema.Table{
		Name:       "schema_migrations",
		Columns:    SchemaMigrationsColumns,
		PrimaryKey: []*schema.Column{SchemaMigrationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true, SchemaType: map[string]string{"postgres": "bigserial"}},
		{Name: "provider", Type: field.TypeString},
		{Name: "uid", Type: field.TypeString},
		{Name: "encrypted_password", Type: field.TypeString},
		{Name: "reset_password_token", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "reset_password_sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "allow_password_change", Type: field.TypeBool, Nullable: true},
		{Name: "remember_created_at", Type: field.TypeTime, Nullable: true},
		{Name: "confirmation_token", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "confirmed_at", Type: field.TypeTime, Nullable: true},
		{Name: "confirmation_sent_at", Type: field.TypeTime, Nullable: true},
		{Name: "unconfirmed_email", Type: field.TypeString, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "nickname", Type: field.TypeString, Nullable: true},
		{Name: "image", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "tokens", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArInternalMetadataTable,
		SchemaMigrationsTable,
		UsersTable,
	}
)

func init() {
}
